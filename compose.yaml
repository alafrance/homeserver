services:
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}
    restart: unless-stopped
    command: tunnel --no-autoupdate run
    depends_on:
      - dashy
      - nextcloud
      - immich-server
  
  dashy:
    image: lissy93/dashy
    container_name: dashy
    volumes:
      - ./dashy/conf.yaml:/app/user-data/conf.yml
    environment:
      - NODE_ENV=${NODE_ENV_DASHY}
    restart: always
    depends_on:
      - glances

  glances:
    image: nicolargo/glances:latest
    container_name: glances
    volumes:
      -  /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - 61208:61208
    environment:
      - GLANCES_OPT=-w
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Paris
    restart: unless-stopped
   
  nextcloud:
    image: nextcloud:latest
    container_name: nextcloud
    ports:
      - "8080:80"
    volumes:
      - ${NEXTCLOUD_DATA_URL}:/var/www/html/data
      - ./nextcloud/config:/var/www/html/config
      - ./nextcloud/apps:/var/www/html/custom_apps
      - ${JELLYFIN_MEDIA_URL}:/media
      - ${IMMICH_PICTURE_URL}:/pictures
    environment:
      - MYSQL_HOST=nextclouddb
      - MYSQL_DATABASE=${NEXTCLOUD_MYSQL_DATABASE}
      - MYSQL_USER=${NEXTCLOUD_MYSQL_USER}
      - MYSQL_PASSWORD=${NEXTCLOUD_MYSQL_PASSWORD}
      - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER}
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}
      - REDIS_HOST=redis
    depends_on:
      - nextclouddb
      - redis
    restart: always

  nextclouddb:
    image: mariadb:latest
    container_name: nextclouddb
    volumes:
      - ${NEXTCLOUD_DB_URL}:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${NEXTCLOUD_DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${NEXTCLOUD_MYSQL_DATABASE}
      - MYSQL_USER=${NEXTCLOUD_MYSQL_USER}
      - MYSQL_PASSWORD=${NEXTCLOUD_MYSQL_PASSWORD}
    restart: always

  redis:
    image: redis:alpine
    container_name: redis
    volumes:
      - ${REDIS_CACHE_URL}:/data
    restart: always

  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    volumes:
      - ${JELLYFIN_CACHE_URL}:/cache
      - ${JELLYFIN_MEDIA_URL}:/media
      - ./jellyfin/config:/config
    restart: 'unless-stopped'
    ports:
      - 8096:8096
  
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:release
    volumes:
      - ${IMMICH_PICTURE_URL}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    ports:
      - 2283:2283
    environment:
      - DB_USERNAME=${IMMICH_DB_USERNAME}
      - DB_PASSWORD=${IMMICH_DB_PASSWORD}
      - DB_DATABASE_NAME=${IMMICH_DB_DATABASE_NAME}
      - DB_HOSTNAME=immich_database
    depends_on:
      - redis
      - immich_database
    restart: always

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:release
    volumes:
      - ${IMMICH_IA_CACHE_URL}:/cache
    environment:
      - DB_USERNAME=${IMMICH_DB_USERNAME}
      - DB_PASSWORD=${IMMICH_DB_PASSWORD}
      - DB_DATABASE_NAME=${IMMICH_DB_DATABASE_NAME}
      - DB_HOSTNAME=immich_database
    restart: always

  immich_database:
    container_name: immich_database
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    environment:
      - POSTGRES_USER=${IMMICH_DB_USERNAME}
      - POSTGRES_PASSWORD=${IMMICH_DB_PASSWORD}
      - POSTGRES_DB=${IMMICH_DB_DATABASE_NAME}
    volumes:
      - ${IMMICH_DB_URL}:/var/lib/postgresql/data
    command: >-
      postgres
      -c shared_preload_libraries=vectors.so
      -c 'search_path="$$user", public, vectors'
      -c logging_collector=on
      -c max_wal_size=2GB
      -c shared_buffers=512MB
      -c wal_compression=on
    restart: always